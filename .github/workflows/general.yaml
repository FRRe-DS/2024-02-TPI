name: General CI
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
    env:
      UV_CACHE_DIR: /tmp/.uv-cache

    steps:
      - uses: actions/checkout@v4

      - name: Set up uv
        # Instala una versión específica de UV.
        run: curl -LsSf https://astral.sh/uv/0.3.2/install.sh | sh

      - name: Set up python
        # Instala una versión específica de python, definida en pyprojects.toml.
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Restaurar el cache de uv
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Instalar las dependencias
        run: uv sync --all-extras --dev && uv add coverage && uv add ruff

      - name: Ejecutar las pruebas
        run: cd ./src && uv run ./manage.py test

      - name: Evaluar la cobertura
        run: cd ./src && uv run -- coverage run ./manage.py test

      - name: Ejecutar formatter
        run: uv run ruff format

      - name: Ejecutar linter
        run: uv run ruff check

      - name: Minimizar el cache de uv
        run: uv cache prune --ci

